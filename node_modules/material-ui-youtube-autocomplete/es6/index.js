'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { AutoComplete } from 'material-ui';
import JSONP from 'jsonp';
import YoutubeFinder from 'youtube-finder';

var googleAutoSuggestURL = '//suggestqueries.google.com/complete/search?client=youtube&ds=yt&q=';

var MaterialUIAutocomplete = (function (_Component) {
	_inherits(MaterialUIAutocomplete, _Component);

	function MaterialUIAutocomplete(props) {
		_classCallCheck(this, MaterialUIAutocomplete);

		_get(Object.getPrototypeOf(MaterialUIAutocomplete.prototype), 'constructor', this).call(this, props);
		this.onUpdateInput = this.onUpdateInput.bind(this);
		this.onNewRequest = this.onNewRequest.bind(this);
		this.YoutubeClient = YoutubeFinder.createClient({ key: this.props.apiKey });
		this.state = {
			dataSource: [],
			inputValue: ''
		};
	}

	_createClass(MaterialUIAutocomplete, [{
		key: 'performSearch',
		value: function performSearch() {
			var self = this,
			    url = googleAutoSuggestURL + this.state.inputValue;

			if (this.state.inputValue !== '') {
				JSONP(url, function (error, data) {
					var searchResults, retrievedSearchTerms;

					if (error) return console.log(error);

					searchResults = data[1];

					retrievedSearchTerms = searchResults.map(function (result) {
						return result[0];
					});

					self.setState({
						dataSource: retrievedSearchTerms
					});
				});
			}
		}
	}, {
		key: 'onUpdateInput',
		value: function onUpdateInput(inputValue) {
			var self = this;
			this.setState({
				inputValue: inputValue
			}, function () {
				self.performSearch();
			});
		}
	}, {
		key: 'onNewRequest',
		value: function onNewRequest(searchTerm) {
			var self = this;
			var params = {
				part: 'id,snippet',
				type: 'video',
				q: this.state.inputValue,
				maxResults: this.props.maxResults <= 50 ? this.props.maxResults : '50'
			};

			this.YoutubeClient.search(params, function (error, results) {
				if (error) return console.log(error);
				self.props.callback(results.items, searchTerm);
				self.setState({
					dataSource: [],
					inputValue: ''
				});
			});
		}
	}, {
		key: 'render',
		value: function render() {
			return React.createElement(
				'div',
				null,
				React.createElement(AutoComplete, {
					searchText: this.state.inputValue,
					floatingLabelText: this.props.placeHolder,
					filter: AutoComplete.noFilter,
					triggerUpdateOnFocus: true,
					dataSource: this.state.dataSource,
					onUpdateInput: this.onUpdateInput,
					onNewRequest: this.onNewRequest })
			);
		}
	}]);

	return MaterialUIAutocomplete;
})(Component);

export default MaterialUIAutocomplete;